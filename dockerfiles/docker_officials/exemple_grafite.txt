
te + Carbon + Statsd + Grafana

An all-in-one image running graphite and carbon-cache.

This image contains a sensible default configuration of graphite, carbon-cache and grafana. Starting this container will expose following ports:

    80: the graphite web interface
    3000: the grafana web interface
    2003: the carbon-cache line receiver (the standard graphite protocol)
    2004: the carbon-cache pickle receiver
    7002: the carbon-cache query port (used by the web interface)
    8125: the statsd UDP port
    8126: the statsd management port

You can log into the administrative interface of graphite-web (a Django application) with the username admin and password admin. These passwords can be changed through the web interface.

NB: Please be aware that by default docker will make the exposed ports accessible from anywhere if the host firewall is unconfigured.
Data volumes

All data is stored in the /data folder in the container (graphite metrics and grafana db)

docker run -v /data/graphite:/data \
           -e SECRET_KEY='random-secret-key' \
           -p 80:80 \
           -p 3000:3000 \
           -p 2003:2003 \
           -p 2004:2004 \
           -p 7002:7002 \
           -p 8125:8125/udp \
           -p 8126:8126 \
           -d samsaffron/graphite

Technical details

By default, this instance of carbon-cache uses the following retention periods resulting in whisper files of approximately 2.5MiB.

10s:8d,1m:31d,10m:1y,1h:5y

Getting started

Generate your SECRET_KEY from here. It is optional but highly recommended.
Based off

https://github.com/nickstenning/dockerfiles.git

Extended by Sam Saffron
Graphite + Carbon + Statsd + Grafana

An all-in-one image running graphite and carbon-cache.

This image contains a sensible default configuration of graphite, carbon-cache and grafana. Starting this container will expose following ports:

    80: the graphite web interface
    3000: the grafana web interface
    2003: the carbon-cache line receiver (the standard graphite protocol)
    2004: the carbon-cache pickle receiver
    7002: the carbon-cache query port (used by the web interface)
    8125: the statsd UDP port
    8126: the statsd management port

You can log into the administrative interface of graphite-web (a Django application) with the username admin and password admin. These passwords can be changed through the web interface.

NB: Please be aware that by default docker will make the exposed ports accessible from anywhere if the host firewall is unconfigured.
Data volumes

All data is stored in the /data folder in the container (graphite metrics and grafana db)

docker run -v /data/graphite:/data \
           -e SECRET_KEY='random-secret-key' \
           -p 80:80 \
           -p 3000:3000 \
           -p 2003:2003 \
           -p 2004:2004 \
           -p 7002:7002 \
           -p 8125:8125/udp \
           -p 8126:8126 \
           -d samsaffron/graphite

Technical details

By default, this instance of carbon-cache uses the following retention periods resulting in whisper files of approximately 2.5MiB.

10s:8d,1m:31d,10m:1y,1h:5y

Getting started

Generate your SECRET_KEY from here. It is optional but highly recommended.
Based off

https://github.com/nickstenning/dockerfiles.git

Extended by Sam Saffron


docker file..

from	ubuntu:14.04
run	echo 'deb http://us.archive.ubuntu.com/ubuntu/ trusty universe' >> /etc/apt/sources.list
run	apt-get -y update

run	apt-get -y install software-properties-common &&\
	apt-get -y update

run     apt-get -y install nodejs python-django-tagging python-simplejson python-memcache \
			    python-ldap python-cairo python-django python-twisted   \
			    python-pysqlite2 python-support python-pip gunicorn     \
			    supervisor nginx-light nodejs git wget curl

# Install statsd
run	mkdir /src && git clone https://github.com/etsy/statsd.git /src/statsd

# Install required packages
run	pip install whisper pytz
run	pip install --install-option="--prefix=/var/lib/graphite" --install-option="--install-lib=/var/lib/graphite/lib" carbon
run	pip install --install-option="--prefix=/var/lib/graphite" --install-option="--install-lib=/var/lib/graphite/webapp" graphite-web

# grafana
run     cd ~ &&\
	wget https://grafanarel.s3.amazonaws.com/builds/grafana_3.0.1_amd64.deb &&\
        dpkg -i grafana_3.0.1_amd64.deb && rm grafana_3.0.1_amd64.deb

# statsd
add	./statsd/config.js /src/statsd/config.js

# Add graphite config
add	./graphite/initial_data.json /var/lib/graphite/webapp/graphite/initial_data.json
add	./graphite/local_settings.py /var/lib/graphite/webapp/graphite/local_settings.py
add	./graphite/carbon.conf /var/lib/graphite/conf/carbon.conf
add	./graphite/storage-schemas.conf /var/lib/graphite/conf/storage-schemas.conf
add	./graphite/storage-aggregation.conf /var/lib/graphite/conf/storage-aggregation.conf

add     ./grafana/config.ini /etc/grafana/config.ini

# Add system service config
add	./nginx/nginx.conf /etc/nginx/nginx.conf
add	./supervisord.conf /etc/supervisor/conf.d/supervisord.conf


# Nginx
#
# graphite
expose	80
# grafana
expose  3000

# Carbon line receiver port
expose	2003
# Carbon pickle receiver port
expose	2004
# Carbon cache query port
expose	7002

# Statsd UDP port
expose	8125/udp
# Statsd Management port
expose	8126

add ./bin/init /usr/bin/init

cmd /usr/bin/init

